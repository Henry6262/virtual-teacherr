create table roles
(
    id   int auto_increment
        primary key,
    type enum ('STUDENT', 'TEACHER', 'ADMIN') not null,
    constraint roles_id_uindex
        unique (id)
);

create table users
(
    id              int auto_increment
        primary key,
    first_name      varchar(20)   not null,
    last_name       varchar(20)   not null,
    username        varchar(25)   not null,
    email           varchar(40)   not null,
    password        varchar(100)  not null,
    profile_picture varchar(1024) null,
    enabled         tinyint(1)    not null,
    constraint user_email_uindex
        unique (email),
    constraint user_id_uindex
        unique (id)
);

create table courses
(
    id              int auto_increment
        primary key,
    title           varchar(50)                                                                             not null,
    creator_id      int                                                                                     null,
    topic           enum ('JAVA', 'JAVASCRIPT', 'ANGULAR', 'REACT', 'PYTHON', 'C', 'RUBY', 'PHP', 'KOTLIN') not null,
    difficulty      enum ('BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'NERD')                                   not null,
    price           double                                                                                  not null,
    description     varchar(1000)                                                                           null,
    starting_date   date                                                                                    null,
    enabled         tinyint(1)                                                                              not null,
    picture         varchar(1000)                                                                           null,
    skill_1         varchar(250)                                                                            not null,
    skill_2         varchar(250)                                                                            not null,
    skill_3         varchar(250)                                                                            null,
    available_mints int(30)                                                                                 not null,
    constraint course_id_uindex
        unique (id),
    constraint course_title_uindex
        unique (title),
    constraint courses_users_id_fk
        foreign key (creator_id) references users (id)
);

create table comments
(
    id        int auto_increment
        primary key,
    course_id int          null,
    user_id   int          null,
    content   varchar(200) not null,
    constraint courseComments_id_uindex
        unique (id),
    constraint courseComments_courses_id_fk
        foreign key (course_id) references courses (id),
    constraint courseComments_users_id_fk
        foreign key (user_id) references users (id)
);

create table course_ratings
(
    id        int auto_increment
        primary key,
    course_id int    not null,
    user_id   int    null,
    rating    int(5) not null,
    constraint course_ratings_id_uindex
        unique (id),
    constraint course_ratings_courses_id_fk
        foreign key (course_id) references courses (id),
    constraint course_ratings_users_id_fk
        foreign key (user_id) references users (id)
);

create table lectures
(
    lecture_id  int auto_increment
        primary key,
    course_id   int                      not null,
    entry_id    int           default 0  not null,
    title       varchar(50)              not null,
    description varchar(1000) default '' null,
    video       varchar(150)  default '' null,
    assignment  varchar(2000) default '' null,
    enabled     tinyint(1)    default 0  null,
    constraint lectures_id_uindex
        unique (lecture_id),
    constraint lectures_title_uindex
        unique (title),
    constraint lectures_courses_id_fk
        foreign key (course_id) references courses (id)
);

create table assignments
(
    assignment_id int auto_increment
        primary key,
    user_id       int                        not null,
    lecture_id    int                        not null,
    content       text                       not null,
    status        enum ('PENDING', 'GRADED') not null,
    grade         int                        null,
    constraint lecture_assignment_grade_id_uindex
        unique (assignment_id),
    constraint lecture_assignment_grade_lectures_id_fk
        foreign key (lecture_id) references lectures (lecture_id),
    constraint lecture_assignment_grade_users_id_fk
        foreign key (user_id) references users (id)
);

create table nft_courses
(
    id          int auto_increment
        primary key,
    owner_id    int        null,
    course_id   int        null,
    minted      tinyint(1) not null,
    drop_number int        not null,
    completed   tinyint(1) not null,
    constraint course_enrollments_id_uindex
        unique (id),
    constraint course_enrollments_courses_id_fk
        foreign key (course_id) references courses (id),
    constraint course_enrollments_users_id_fk
        foreign key (owner_id) references users (id)
);

create table users_completed_lectures
(
    user_id    int null,
    lecture_id int null,
    constraint users_completed_lectures_lectures_id_fk
        foreign key (lecture_id) references lectures (lecture_id),
    constraint users_completed_lectures_users_id_fk
        foreign key (user_id) references users (id)
);

create table users_roles
(
    user_id int null,
    role_id int null,
    constraint users_roles_roles_id_fk
        foreign key (role_id) references roles (id),
    constraint users_roles_users_id_fk
        foreign key (user_id) references users (id)
);

create table wallets
(
    id      int auto_increment
        primary key,
    user_id int    not null,
    balance double not null,
    constraint wallets_id_uindex
        unique (id),
    constraint wallets_users_id_fk
        foreign key (user_id) references users (id)
);

create table transactions
(
    id                      int auto_increment
        primary key,
    recipient_wallet_id     int                                                   null,
    sender_wallet_id        int                                                   null,
    amount                  int                                                   not null,
    type                    enum ('EXCHANGE', 'DEPOSIT', 'PURCHASE', 'TRANSFER')  not null,
    status                  enum ('PENDING', 'COMPLETED', 'REJECTED', 'ACCEPTED') not null,
    creation_time           datetime                                              not null,
    purchased_nft_course_id int                                                   null,
    constraint transactions_id_uindex
        unique (id),
    constraint transactions_nft_courses_id_fk
        foreign key (purchased_nft_course_id) references nft_courses (id),
    constraint transactions_wallets_id_fk
        foreign key (sender_wallet_id) references wallets (id),
    constraint transactions_wallets_id_fk_2
        foreign key (recipient_wallet_id) references wallets (id)
);

create table verification_tokens
(
    id              int auto_increment
        primary key,
    token           varchar(75) not null,
    verifier_id     int         null,
    transaction_id  int         null,
    expiration_time datetime    not null,
    constraint verification_tokens_id_uindex
        unique (id),
    constraint verification_tokens_token_uindex
        unique (token),
    constraint verification_tokens_transactions_id_fk
        foreign key (transaction_id) references transactions (id),
    constraint verification_tokens_users_id_fk
        foreign key (verifier_id) references users (id)
);

